<!DOCTYPE html>
<html>
<head>
  <title> Pills </title>
  <meta charset="utf-8">
  <link rel="stylesheet" type="text/css" href="https://netdna.bootstrapcdn.com/bootswatch/2.3.1/spacelab/bootstrap.min.css">
  <style>

body {
      margin: 20px;
      background-color: #3e6b85;  
}

#graph {
  float:left;
}

h1 {
  color: #ffffff;
}   

circle {
  fill: #63aad4;
  stroke: #ffffff;
  stroke-width: 2px;
  pointer-events: all;
}
    circle:hover {

    }

circle.parent {

}

circle.parent:hover {

}

circle.child {
}

.child{

}
</style>



<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js"></script>
<script type="text/javascript" src="http://code.jquery.com/jquery-1.9.1.js"></script>
</head>
<body>
    <h1>
      Pharma Lookup - Top drugs based on U.S. sales (in $000s)
    </h1>
    <div id = "graph"></div>

<script type="text/javascript">


var width = 1200,
    height = 900,
    r = 800, //radius
    x = d3.scale.linear().range([0, r]),
    y = d3.scale.linear().range([0, r]),
    node,
    root;

var pack = d3.layout.pack()
    .size([r, r])
    .value(function(d) { return d.size; })

var vis = d3.select("#graph").insert("svg:svg", "h2")
    .attr("width", width)
    .attr("height", height)
    .attr("class", "pack")
    .append("svg:g")
    .attr("transform", "translate(2,2)"); // Set the center point of SVG canvas at (2,2).

// Get data (already formatted in hierarchical style JSON, also known as nested or flare).
d3.json("test17.json", function(data) {
  node = root = data ;

  var nodes = pack.nodes(root);

  vis.selectAll("circle")
      .data(nodes)
    .enter().append("svg:circle")
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("class", "pack")
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; })
      .attr("r", function(d) { return d.r; })
      .on("click", function(d) { return zoom(node == d ? root : d); });

  vis.selectAll("text")
      .data(nodes)
    .enter().append("svg:text")
    .filter(function(d) { return !d.children})
      .attr("class", function(d) { return d.children ? "parent" : "child"; })
      .attr("x", function(d) { return d.x; })
      .attr("y", function(d) { return d.y; })
      .attr("dy", ".35em")
      .attr("text-anchor", "middle")
      .style("opacity", function(d) { return d.r > 20 ? 1 : 0; })
      .text(function(d) { return d.name; });

  d3.select(window).on("click", function() { zoom(root); });
});

function zoom(d, i) {
  var k = r / d.r / 2;
  x.domain([d.x - d.r, d.x + d.r]);
  y.domain([d.y - d.r, d.y + d.r]);

  var t = vis.transition()
      .duration(d3.event.altKey ? 7500 : 750);

  t.selectAll("circle")
      .attr("cx", function(d) { return x(d.x); })
      .attr("cy", function(d) { return y(d.y); })
      .attr("r", function(d) { return k * d.r; });

  t.selectAll("text")
      .attr("x", function(d) { return x(d.x); })
      .attr("y", function(d) { return y(d.y); })
      .style("opacity", function(d) { return k * d.r > 20 ? 1 : 0; });

  node = d;
  d3.event.stopPropagation();
}
  </script>
  </body>
</html>
